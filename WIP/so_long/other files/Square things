/*
		// Making a single colored square
		int x_offset = 5;
		int y_offset = 5;
		int x_size = 50;
		int y_size = 50;
		int color = 0x0000FFFF;
		for (int i = 0; i < x_size; i++)
		{
			for (int j = 0; j < y_size; j++)
			{
				ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, color);
			}
		}*/

		/*
		// Making a square with a rainbow gradient
		int x_offset = 5;
		int y_offset = 5;
		int x_size = 255;
		int y_size = 255;
		float r = 255.0;
		float g = 0.0;
		float b = 0.0;
		for (int i = 0; i < x_size; i++)
		{
			if (i < 85)
			{
				g += 3;
				r -= 3;
			}
			if (i > 85 && i <= 170)
				g -= 3;
			if (i > 85 && i <= 170)
				b += 3;
			if (i > 170 && i <= 255)
			{
				b -= 3;
				r += 3;
			}

			for (int j = 0; j < y_size; j++)
			{
				ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, get_rgb(r, g, b));
			}
		}
		*/


		/*
		// Dajan's super cool washed out pride flag
		int x_offset = 5;
		int y_offset = 5;
		int x_size = 255;
		int y_size = 255;
		unsigned char r = 255;
		unsigned char g = 0;
		unsigned char b = 0;
		char green_sign = 1;
		int step = 255 / 4;
		for (int i = 0; i < x_size; i++)
		{
			r = (int)(255.0 * cos(((double)i * 1.57) / 255));
			// r -= 1;
			// b += 1;
			b = (int)(255.0 * sin(((double)i * 1.57) / 255));
			g = 127 - (int)(127.0 * cos(((double)i * 3.14 * 2) / 255));
			printf("%d\n", g);
			// g += green_sign;

			for (int j = 0; j < y_size; j++)
			{
				ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, get_rgb(r, g, b));
			}
		}
		*/





		/*
		// Draw a square using a the square struct
		sqr.x_offset = 5;
		sqr.y_offset = 5;
		sqr.x_size = 50;
		sqr.y_size = 50;
		sqr.fill_color = 0x00d6caa5;
		sqr.bound_color = 0x00af9c63;
		sqr.bound_size = 2;
		for (int i = 0; i < sqr.x_size; i++)
		{
			for (int j = 0; j < sqr.y_size; j++)
			{
				if (i < sqr.bound_size)
					ft_mlx_pixel_put(&image, sqr.x_offset + i, sqr.y_offset + j, sqr.bound_color);
				else if (j < sqr.bound_size)
					ft_mlx_pixel_put(&image, sqr.x_offset + i, sqr.y_offset + j, sqr.bound_color);
				else if (i >= sqr.y_size - sqr.bound_size)
					ft_mlx_pixel_put(&image, sqr.x_offset + i, sqr.y_offset + j, sqr.bound_color);
				else if (j >= sqr.x_size - sqr.bound_size)
					ft_mlx_pixel_put(&image, sqr.x_offset + i, sqr.y_offset + j, sqr.bound_color);
				else
					ft_mlx_pixel_put(&image, sqr.x_offset + i, sqr.y_offset + j, sqr.fill_color);
			}
		}
		*/

		



		/*
		// Making a square next to the other one with different colors
		int x_offset = 5 + 50;
		int y_offset = 5;
		int x_size = 50;
		int y_size = 50;
		int fill_color = 0x001e8eec;
		int bound_color = 0x00f4ba7d;
		int bound_size = 2;
		for (int i = 0; i < x_size; i++)
		{
			for (int j = 0; j < y_size; j++)
			{
				if (i < bound_size)
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, bound_color);
				else if (j < bound_size)
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, bound_color);
				else if (i >= y_size - bound_size)
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, bound_color);
				else if (j >= x_size - bound_size)
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, bound_color);
				else
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, fill_color);
			}
		}
		*/


		/*
		// Making a square with a bound
		x_offset = 5;
		y_offset = 5;
		x_size = 50;
		y_size = 50;
		fill_color = 0x00d6caa5;
		bound_color = 0x00af9c63;
		bound_size = 2;
		for (int i = 0; i < x_size; i++)
		{
			for (int j = 0; j < y_size; j++)
			{
				if (i < bound_size)
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, bound_color);
				else if (j < bound_size)
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, bound_color);
				else if (i >= y_size - bound_size)
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, bound_color);
				else if (j >= x_size - bound_size)
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, bound_color);
				else
					ft_mlx_pixel_put(&image, x_offset + i, y_offset + j, fill_color);
			}
		}
		*/